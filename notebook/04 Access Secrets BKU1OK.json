{
	"name": "04 Access Secrets BKU1OK",
	"properties": {
		"folder": {
			"name": "dmp_examples"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool0",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/0494c897-f1d8-40e6-802f-a5d7b636b9f0/resourceGroups/rsgk8ddmpdev1/providers/Microsoft.Synapse/workspaces/swak8ddmpdev1/bigDataPools/sparkpool0",
				"name": "sparkpool0",
				"type": "Spark",
				"endpoint": "https://swak8ddmpdev1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool0",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			}
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"# Access Secrets in KeyVault\n",
					"\n",
					"This notebook provides examples of how to read and put a secret into the corresponding DMP keyvault. This notebook uses [MS Spark Utils](https://docs.microsoft.com/en-us/azure/synapse-analytics/spark/microsoft-spark-utilities?pivots=programming-language-python) .\n",
					"\n",
					"\n",
					"## Limits\n",
					"- A secret must be created\n",
					"- There must be a private managed endpoint connection to the keyvault\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Get the user secret\n",
					"\n",
					"Let's first load the user secret which is created by Terraform"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\n",
					"# Load MS Spark Utils\n",
					"from notebookutils import mssparkutils\n",
					"\n",
					"keyvaultName = 'akvk8ddmpdev1'\n",
					"\n",
					"secret = mssparkutils.credentials.getSecret(keyvaultName,'usersecretsynapse')\n",
					"print(secret)"
				],
				"attachments": null,
				"execution_count": 14
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Update the user secret\n",
					"\n",
					"Let's change the password and see if we have right permissions to change a secret.\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"mssparkutils.credentials.putSecret(keyvaultName,'usersecretsynapse','uns3cure45h3ll3')"
				],
				"attachments": null,
				"execution_count": 13
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Validate the secret update\n",
					"\n",
					"In this step we validate if the secret changed to the value set before."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"secretChanged = mssparkutils.credentials.getSecret(keyvaultName,'usersecretsynapse')\n",
					"print(secretChanged)"
				],
				"attachments": null,
				"execution_count": 12
			}
		]
	}
}