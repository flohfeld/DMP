{
	"name": "Notebook 7_Copy1",
	"properties": {
		"folder": {
			"name": "TB"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool0",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "1",
				"spark.autotune.trackingId": "df56ddb2-77a6-45cc-abcc-86413185d268"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_sparkdotnet",
				"display_name": "Synapse SparkDotNet"
			},
			"language_info": {
				"name": "csharp"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/0494c897-f1d8-40e6-802f-a5d7b636b9f0/resourceGroups/rsgk8ddmpdev1/providers/Microsoft.Synapse/workspaces/swak8ddmpdev1/bigDataPools/sparkpool0",
				"name": "sparkpool0",
				"type": "Spark",
				"endpoint": "https://swak8ddmpdev1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool0",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			}
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"#r \"nuget:Azure.Storage.Files.DataLake\""
				],
				"attachments": null,
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"using Azure;\r\n",
					"using Azure.Storage.Files.DataLake;\r\n",
					"using Azure.Storage.Files.DataLake.Models;\r\n",
					"using Azure.Storage;\r\n",
					"using System.IO;"
				],
				"attachments": null,
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"public static void GetDataLakeServiceClient(ref DataLakeServiceClient dataLakeServiceClient,\r\n",
					"    string accountName, string accountKey)\r\n",
					"{\r\n",
					"    StorageSharedKeyCredential sharedKeyCredential =\r\n",
					"        new StorageSharedKeyCredential(accountName, accountKey);\r\n",
					"\r\n",
					"    string dfsUri = \"https://\" + accountName + \".dfs.core.windows.net\";\r\n",
					"\r\n",
					"    dataLakeServiceClient = new DataLakeServiceClient\r\n",
					"        (new Uri(dfsUri), sharedKeyCredential);\r\n",
					"}"
				],
				"attachments": null,
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"public async Task<DataLakeDirectoryClient> CreateDirectory\r\n",
					"    (DataLakeServiceClient serviceClient, string fileSystemName)\r\n",
					"{\r\n",
					"    DataLakeFileSystemClient fileSystemClient =\r\n",
					"        serviceClient.GetFileSystemClient(fileSystemName);\r\n",
					"\r\n",
					"    DataLakeDirectoryClient directoryClient =\r\n",
					"        await fileSystemClient.CreateDirectoryAsync(\"my-directory\");\r\n",
					"\r\n",
					"    return await directoryClient.CreateSubDirectoryAsync(\"my-subdirectory\");\r\n",
					"}"
				],
				"attachments": null,
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"public async Task UploadFile(DataLakeFileSystemClient fileSystemClient)\r\n",
					"{\r\n",
					"    DataLakeDirectoryClient directoryClient =\r\n",
					"        fileSystemClient.GetDirectoryClient(\"my-directory\");\r\n",
					"\r\n",
					"    DataLakeFileClient fileClient = await directoryClient.CreateFileAsync(\"uploaded-file.txt\");\r\n",
					"\r\n",
					"    FileStream fileStream =\r\n",
					"        File.OpenRead(\"C:\\\\Users\\\\contoso\\\\Temp\\\\file-to-upload.txt\");\r\n",
					"\r\n",
					"    long fileSize = fileStream.Length;\r\n",
					"\r\n",
					"    await fileClient.AppendAsync(fileStream, offset: 0);\r\n",
					"\r\n",
					"    await fileClient.FlushAsync(position: fileSize);\r\n",
					"\r\n",
					"}"
				],
				"attachments": null,
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"public async Task UploadFileBulk(DataLakeFileSystemClient fileSystemClient)\r\n",
					"{\r\n",
					"    DataLakeDirectoryClient directoryClient =\r\n",
					"        fileSystemClient.GetDirectoryClient(\"my-directory\");\r\n",
					"\r\n",
					"    DataLakeFileClient fileClient = directoryClient.GetFileClient(\"uploaded-file.txt\");\r\n",
					"\r\n",
					"    FileStream fileStream =\r\n",
					"        File.OpenRead(\"C:\\\\Users\\\\contoso\\\\file-to-upload.txt\");\r\n",
					"\r\n",
					"    await fileClient.UploadAsync(fileStream);\r\n",
					"\r\n",
					"}"
				],
				"attachments": null,
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"public async Task ListFilesInDirectory(DataLakeFileSystemClient fileSystemClient)\r\n",
					"{\r\n",
					"    IAsyncEnumerator<PathItem> enumerator =\r\n",
					"        fileSystemClient.GetPathsAsync(\"my-directory\").GetAsyncEnumerator();\r\n",
					"\r\n",
					"    await enumerator.MoveNextAsync();\r\n",
					"\r\n",
					"    PathItem item = enumerator.Current;\r\n",
					"\r\n",
					"    while (item != null)\r\n",
					"    {\r\n",
					"        Console.WriteLine(item.Name);\r\n",
					"\r\n",
					"        if (!await enumerator.MoveNextAsync())\r\n",
					"        {\r\n",
					"            break;\r\n",
					"        }\r\n",
					"\r\n",
					"        item = enumerator.Current;\r\n",
					"    }\r\n",
					"\r\n",
					"}"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"StorageSharedKeyCredential sharedKeyCredential = new StorageSharedKeyCredential(\"stak8ddmpdev1landing\", \"%2F9UCzwhmKh62a1wdEUhpycoDRtwygQskqlIf7c3s5KQ%3D\");\r\n",
					"\r\n",
					"// Create DataLakeServiceClient using StorageSharedKeyCredentials\r\n",
					"DataLakeServiceClient serviceClient = new DataLakeServiceClient(serviceUri, sharedKeyCredential);"
				],
				"attachments": null,
				"execution_count": 9
			}
		]
	}
}